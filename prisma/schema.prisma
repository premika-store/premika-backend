// Code Generated by Sidekick is for learning and experimentation purposes only.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model store {
  id         String      @id @default(cuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToSColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model Billboard {
  id         String           @id @default(cuid())
  storeId    String
  store      store            @relation("StoreToBillboard", fields: [storeId], references: [id])
  title      String
  images     BillboardImage[]
  productId  String?
  product    Product?         @relation("BillboardToProduct", fields: [productId], references: [id])
  categories Category[]       @relation("BillboardToCategory")
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@index([storeId])
}

model BillboardImage {
  id          String    @id @default(cuid())
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  url         String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([billboardId])
}

model Category {
  id          String    @id @default(cuid())
  storeId     String
  store       store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String        @id @default(cuid())
  storeId    String
  Store      store         @relation("StoreToSize", fields: [storeId], references: [id])
  name       String
  value      String
  products   ProductSize[]
  orderItems OrderItem[]   @relation("OrderItemToSize")
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@index([storeId])
}

model Color {
  id         String    @id @default(cuid())
  storeId    String
  Store      store     @relation("StoreToSColor", fields: [storeId], references: [id])
  name       String
  value      String
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([storeId])
}

// Join table for stock per size
model ProductSize {
  id             String  @id @default(cuid())
  product        Product @relation(fields: [productId], references: [id])
  productId      String
  size           Size    @relation(fields: [sizeId], references: [id])
  sizeId         String
  stock          Int
  unlimitedStock Boolean @default(false)
}

model Product {
  id               String        @id @default(cuid())
  storeId          String
  store            store         @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId       String
  category         Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name             String
  shortDescription String
  longDescription  String
  price            Float
  isFeatured       Boolean       @default(false)
  isArchived       Boolean       @default(false)
  colorId          String
  color            Color         @relation(fields: [colorId], references: [id])
  images           Image[]
  productSizes     ProductSize[]
  reviews          Review[]
  orderItems       OrderItem[]
  billboards       Billboard[]   @relation("BillboardToProduct")
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
}

model Image {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  isMain     Boolean  @default(false)
  order      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([productId])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([productId])
}

model Order {
  id           String      @id @default(cuid())
  storeId      String
  store        store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems   OrderItem[]
  isPaid       Boolean     @default(false)
  customerName String
  phone        String
  address      String
  email        String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  sizeId     String?
  size       Size?    @relation("OrderItemToSize", fields: [sizeId], references: [id])
  quantity   Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}
